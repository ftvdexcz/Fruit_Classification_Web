# -*- coding: utf-8 -*-
"""model_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XvHqTvNOrFsaCm8Gizb2EE0vb30-LPZx
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np 
import os
import matplotlib.pyplot as plt
import tensorflow as tf 
from tensorflow.keras import datasets, layers, models
import cv2

def load_data(path_data):
    def load_file_from_folder(folder_name):
        X, y = [], []
        for folder in os.listdir(folder_name):
            folder_path = os.path.join(folder_name, folder)
            for filename in os.listdir(folder_path):
                file_path = os.path.join(folder_path, filename)
                try:
                    image = cv2.imread(file_path)
                    if image is not None:
                        X.append(image)
                        y.append(folder)
                except Exception as e:
                    print(e)
        return X, y
    X_train, y_train = load_file_from_folder(path_data + '/' + 'Train')
    X_test, y_test = load_file_from_folder(path_data + '/' + 'Test')
    return np.array(X_train), np.array(y_train), np.array(X_test), np.array(y_test)

path_data = os.getcwd() # current directory
X_train,y_train, X_test, y_test = load_data(path_data)

print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)

print(np.unique(y_train))

# Encoding label 
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y_train = le.fit_transform(y_train)

print(y_train)

y_test = le.transform(y_test)

print(le.inverse_transform([1])) # inverse_transform

# One hot encoding label (Y)
from keras.utils import np_utils
print('Dữ liệu y ban đầu ', y_train[0])
y_train = np_utils.to_categorical(y_train, 6)
y_test = np_utils.to_categorical(y_test, 6)
print('Dữ liệu y sau one-hot encoding ',y_train[0])

# save numpy array, train model with colab ... 
np.save('X_train.npy', X_train)
np.save('X_test.npy', X_test)
np.save('y_train.npy', y_train)
np.save('y_test.npy', y_test)

# load numpy array from npy file

# load array
X_train = np.load('/content/drive/MyDrive/Colab Notebooks/fruit_classification/X_train.npy')
X_test = np.load('/content/drive/MyDrive/Colab Notebooks/fruit_classification/X_test.npy')
y_train = np.load('/content/drive/MyDrive/Colab Notebooks/fruit_classification/y_train.npy')
y_test = np.load('/content/drive/MyDrive/Colab Notebooks/fruit_classification/y_test.npy')
# print the array
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

model = models.Sequential()
model.add(layers.Conv2D(16, (5,5), activation='relu', input_shape=(100,100,3)))
model.add(layers.MaxPooling2D(2,2))
model.add(layers.Conv2D(32, (5,5), activation='relu'))
model.add(layers.MaxPooling2D(2,2))
model.add(layers.Conv2D(64, (5,5), activation='relu'))
model.add(layers.MaxPooling2D(2,2))
model.add(layers.Conv2D(128, (5,5), activation='relu'))
model.add(layers.MaxPooling2D(2,2))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(6, activation='softmax'))

model.summary()

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=30, batch_size=32, verbose=1,
                    validation_data=(X_test, y_test))

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(X_test,  y_test, verbose=2)

y_predict = model.predict(X_test[0].reshape(1,100,100,3))
print('Giá trị dự đoán: ', np.argmax(y_predict))

print(y_test[0])

model.save('my_model_weights.h5')

from keras.models import load_model
new_model = load_model('my_model_weights.h5')

y_predict = new_model.predict(X_test[0].reshape(1,100,100,3))
print('Giá trị dự đoán: ', np.argmax(y_predict))